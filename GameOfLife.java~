import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.*;

public class GameOfLife extends JFrame implements ActionListener {
  
  private int width = 0;
  private int height = 0;
  private JPanel buttonPanel = null;
  private JToggleButton[][] buttons = null;
  private JPanel actionsPanel = null;
  private JButton clearButton = null;
  private JButton stepButton = null;
  private JToggleButton runButton = null;
  private javax.swing.Timer stepper = null;
  
  public GameOfLife() {
    
    try {
      UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
    } catch (ClassNotFoundException e) {
      System.out.println("Error setting look and feel");
    } catch (InstantiationException e) {
      System.out.println("Error setting look and feel");
    } catch (IllegalAccessException e) {
      System.out.println("Error setting look and feel");
    } catch (UnsupportedLookAndFeelException e) {
      System.out.println("Error setting look and feel");
    }
    
    while (true) {
      String s = JOptionPane.showInputDialog(this, "How wide do you want the game?", "Size", JOptionPane.QUESTION_MESSAGE);
      
      if (s == null) {
        System.exit(0);
      }
        
      try {
        width = Integer.parseInt(s);
      } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter an integer", "Invalid input!", JOptionPane.ERROR_MESSAGE);
        continue;
      }
      
      if (width <= 1) {
        JOptionPane.showMessageDialog(this, "Please enter an integer larger than 1", "Invalid input!", JOptionPane.ERROR_MESSAGE);
        continue;
      }
      
      break;
      
    }

    while (true) {
      String s = JOptionPane.showInputDialog(this, "How tall do you want the game?", "Size", JOptionPane.QUESTION_MESSAGE);
      
      if (s == null) {
        System.exit(0);
      }
        
      try {
        height = Integer.parseInt(s);
      } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter an integer", "Invalid input!", JOptionPane.ERROR_MESSAGE);
        continue;
      }
      
      if (height <= 1) {
        JOptionPane.showMessageDialog(this, "Please enter an integer larger than 1", "Invalid input!", JOptionPane.ERROR_MESSAGE);
        continue;
      }
      
      break;
      
    }
    
    stepper = new javax.swing.Timer(250, this);

    buttonPanel = new JPanel(new GridLayout(height, width));

    buttons = new JToggleButton[height][width];

    for (int r = 0; r < height; r++) {
      for (int c = 0; c < width; c++) {
      buttons[r][c] = new JToggleButton();
      buttons[r][c].setBackground(Color.BLACK);
      buttonPanel.add(buttons[r][c]);
      }
    }

    clearButton = new JButton("Clear");
    clearButton.addActionListener(this);

    stepButton = new JButton("Step");
    stepButton.addActionListener(this);

    runButton = new JToggleButton("Run");
    runButton.addActionListener(this);
    
    actionsPanel = new JPanel();
    actionsPanel.add(clearButton);
    actionsPanel.add(stepButton);
    actionsPanel.add(runButton);

    setDefaultCloseOperation(EXIT_ON_CLOSE);
    
    setTitle("Conway's Game of Life");
    add(buttonPanel);
    add(actionsPanel, BorderLayout.SOUTH);
    setSize(width*25, height*25);
    setVisible(true);

  }
  
  public void actionPerformed(ActionEvent e) {
    if (e.getSource() == clearButton) {
      clearButtons();
    } else if (e.getSource() == stepButton || e.getSource() == stepper) {
      step();
    } else if (e.getSource() == runButton) {
      if (runButton.isSelected()) {
       stepper.start();
      } else {
        stepper.stop();
      }
    }
  }
  
  private void clearButtons() {
    for (int r = 0; r < height; r++) {
      for (int c = 0; c < width; c++) {
        buttons[r][c].setSelected(false);
      }
    }
  }

  private int neighbors(int r, int c) {
    int n = 0;
    if (r > 0) {
      if (c > 0 && buttons[r - 1][c - 1].isSelected())
        n++;
      if (buttons[r - 1][c].isSelected())
        n++;
      if (c < width - 1 && buttons[r - 1][c + 1].isSelected())
        n++;
    }

    if (c > 0 && buttons[r][c - 1].isSelected())
      n++;
    if (c < width - 1 && buttons[r][c].isSelected())
      n++;

    if (r < height - 1) {
      if (c > 0 && buttons[r + 1][c - 1].isSelected())
        n++;
      if (buttons[r + 1][c].isSelected())
        n++;
      if (c < width - 1 && buttons[r + 1][c + 1].isSelected())
        n++;
    }

    return n;
  }
  
  private boolean[][] next() {
    boolean[][] nextGrid = new boolean[height][width];
    for (int r = 0; r < height; r++) {
      for (int c = 0; c < width; c++) {
        int n = neighbors(r, c);
        if (n < 2)
          nextGrid[r][c] = false;
        if (n >= 2 && n <= 3 && buttons[r][c].isSelected())
          nextGrid[r][c] = true;
        if (n > 3)
          nextGrid[r][c] = false;
        if (n == 3 && !buttons[r][c].isSelected())
          nextGrid[r][c] = true;
      }
    }
    return nextGrid;
  }

  private void step() {
    boolean[][] n = next();
    for (int r = 0; r < height; r++) {
      for (int c = 0; c < width; c++) {
        if (n[r][c])
          buttons[r][c].setSelected(true);
        else
          buttons[r][c].setSelected(false);
      }
    }
  }

  public static void main(String[] args) {
    GameOfLife life = new GameOfLife();
  }
  
}